# app.py

import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime
from dateutil.relativedelta import relativedelta
from streamlit_option_menu import option_menu

from src.data_processing import get_processed_data

# --- CONFIGURA√á√ÉO DA P√ÅGINA ---
st.set_page_config(page_title="Dashboard de Manuten√ß√£o", layout="wide", page_icon="üõ†Ô∏è")

# --- CONSTANTES E FUN√á√ïES ---
NATUREZAS_MANUTENCAO = {
    'Manuten√ß√£o Total': ['03.03 - MANUTEN√á√ÉO DE VE√çCULOS', '03.05 - RODAS E PNEUS', '03.02 - LATARIA E PINTURA', '03.04 - ACESS√ìRIOS DE VE√çCULOS'],
    'Manuten√ß√£o de Ve√≠culos': ['03.03 - MANUTEN√á√ÉO DE VE√çCULOS'], 'Rodas e Pneus': ['03.05 - RODAS E PNEUS'],
    'Lataria e Pintura': ['03.02 - LATARIA E PINTURA'], 'Acess√≥rios': ['03.04 - ACESS√ìRIOS DE VE√çCULOS']
}

# --- FUN√á√ÉO DE KPI CORRIGIDA ---
def calcular_kpis(df_filtrado, mes_selecionado_str):
    """Calcula os KPIs com base no m√™s selecionado."""
    if mes_selecionado_str == "M√™s Atual":
        data_base = datetime.now()
    else:
        data_base = datetime.strptime(mes_selecionado_str + '-01', '%Y-%m-%d')

    mes_analise_inicio = data_base.replace(day=1)
    mes_anterior_inicio = mes_analise_inicio - relativedelta(months=1)
    seis_meses_atras = mes_analise_inicio - relativedelta(months=6)
    
    # --- CORRE√á√ÉO APLICADA AQUI ---
    # Filtra o dataframe comparando o ano e o m√™s diretamente, em vez de usar to_period() em um datetime.
    df_mes_analise = df_filtrado[
        (df_filtrado['data'].dt.year == mes_analise_inicio.year) &
        (df_filtrado['data'].dt.month == mes_analise_inicio.month)
    ]
    
    df_mes_anterior = df_filtrado[
        (df_filtrado['data'].dt.year == mes_anterior_inicio.year) &
        (df_filtrado['data'].dt.month == mes_anterior_inicio.month)
    ]
    # --- FIM DA CORRE√á√ÉO ---

    df_ultimos_6_meses = df_filtrado[(df_filtrado['data'] >= seis_meses_atras) & (df_filtrado['data'] < mes_analise_inicio)]
    
    total_mes_analise = df_mes_analise['valor'].sum()
    total_mes_anterior = df_mes_anterior['valor'].sum()
    
    diff_mes_anterior = total_mes_analise - total_mes_anterior
    perc_diff_mes_anterior = (diff_mes_anterior / total_mes_anterior * 100) if total_mes_anterior != 0 else 0
    
    total_ultimos_6_meses = df_ultimos_6_meses['valor'].sum()
    media_6_meses = total_ultimos_6_meses / 6 if total_ultimos_6_meses > 0 else 0
    
    diff_media_6_meses = total_mes_analise - media_6_meses
    perc_diff_media_6_meses = (diff_media_6_meses / media_6_meses * 100) if media_6_meses != 0 else 0

    return {
        "total_mes_analise": total_mes_analise, "total_mes_anterior": total_mes_anterior,
        "diff_mes_anterior": diff_mes_anterior, "perc_diff_mes_anterior": perc_diff_mes_anterior,
        "media_6_meses": media_6_meses, "diff_media_6_meses": diff_media_6_meses,
        "perc_diff_media_6_meses": perc_diff_media_6_meses
    }

# --- CARREGAMENTO DE DADOS ---
with st.spinner('Conectando ao banco e processando os dados... Por favor, aguarde! ‚òï'):
    df_original, df_rateio = get_processed_data()

# --- LAYOUT PRINCIPAL (sem altera√ß√µes) ---
if not df_original.empty:
    with st.sidebar:
        st.title("An√°lise de Frota")
        selected = option_menu(
            menu_title=None,
            options=["Vis√£o Geral", "An√°lise Detalhada", "An√°lise de Rateios"],
            icons=["bar-chart-line", "search", "diagram-3"],
            default_index=0,
        )

    st.header("Painel de Controle")
    with st.expander("Clique para expandir ou recolher os filtros", expanded=True):
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            meses_disponiveis = sorted(df_original['mes_ano'].unique().tolist(), reverse=True)
            mes_selecionado = st.selectbox("M√™s de An√°lise", options=["M√™s Atual"] + meses_disponiveis)
        
        with col2:
            empresa_selecionada = st.selectbox("Empresa", options=['Todas'] + sorted(df_original['empresa'].unique().tolist()))
        
        with col3:
            regiao_selecionada = st.selectbox("Regi√£o", options=['Todas'] + sorted(df_original['regiao'].unique().tolist()))

        with col4:
            df_filtrado_temp = df_original.copy()
            if regiao_selecionada != 'Todas':
                df_filtrado_temp = df_filtrado_temp[df_filtrado_temp['regiao'] == regiao_selecionada]
            filial_selecionada = st.selectbox("Filial", options=['Todas'] + sorted(df_filtrado_temp['filial'].unique().tolist()))

    df_filtrado_geral = df_original.copy()
    if empresa_selecionada != 'Todas':
        df_filtrado_geral = df_filtrado_geral[df_filtrado_geral['empresa'] == empresa_selecionada]
    if regiao_selecionada != 'Todas':
        df_filtrado_geral = df_filtrado_geral[df_filtrado_geral['regiao'] == regiao_selecionada]
    if filial_selecionada != 'Todas':
        df_filtrado_geral = df_filtrado_geral[df_filtrado_geral['filial'] == filial_selecionada]

    st.markdown("---")

    if selected == "Vis√£o Geral":
        st.title(f"üõ†Ô∏è Vis√£o Geral")
        
        natureza_selecionada_key = st.selectbox(
            "Selecione o Tipo de Manuten√ß√£o para An√°lise",
            options=list(NATUREZAS_MANUTENCAO.keys())
        )
        df_final_filtrado = df_filtrado_geral[df_filtrado_geral['natureza_correta'].isin(NATUREZAS_MANUTENCAO[natureza_selecionada_key])]

        if df_final_filtrado.empty:
            st.warning("Nenhum dado encontrado para os filtros selecionados.")
        else:
            kpis = calcular_kpis(df_final_filtrado, mes_selecionado)
            
            tab1, tab2 = st.tabs(["üìà Indicadores Chave (KPIs)", "üìä Gr√°ficos Detalhados"])

            with tab1:
                st.subheader(f"Performance para o per√≠odo de '{mes_selecionado}'")
                kpi_cols = st.columns(4)
                kpi_cols[0].metric(label=f"Total em {mes_selecionado}", value=f"R$ {kpis['total_mes_analise']:,.2f}")
                kpi_cols[1].metric(label="Varia√ß√£o vs M√™s Anterior", value=f"{kpis['perc_diff_mes_anterior']:.1f}%", delta=f"R$ {kpis['diff_mes_anterior']:,.2f}", delta_color="inverse")
                kpi_cols[2].metric(label="M√©dia dos √öltimos 6 Meses", value=f"R$ {kpis['media_6_meses']:,.2f}")
                kpi_cols[3].metric(label="Varia√ß√£o vs M√©dia 6M", value=f"{kpis['perc_diff_media_6_meses']:.1f}%", delta=f"R$ {kpis['diff_media_6_meses']:,.2f}", delta_color="inverse")

            with tab2:
                st.subheader("Evolu√ß√£o Mensal dos Custos (√∫ltimos 12 meses)")
                doze_meses_atras = (datetime.now() - relativedelta(months=12)).strftime('%Y-%m')
                df_grafico = df_final_filtrado[df_final_filtrado['mes_ano'] >= doze_meses_atras]
                custo_mensal = df_grafico.groupby('mes_ano')['valor'].sum().reset_index()
                
                fig = px.bar(custo_mensal, x='mes_ano', y='valor', text_auto='.2s', title="Custo Total por M√™s",
                             labels={'mes_ano': 'M√™s/Ano', 'valor': 'Custo Total (R$)'})
                fig.update_traces(textangle=0, textposition="outside")
                st.plotly_chart(fig, use_container_width=True)

    if selected == "An√°lise Detalhada":
        st.title("üîç An√°lise Detalhada dos Dados")
        st.info("Os dados abaixo refletem os filtros de M√™s, Empresa, Regi√£o e Filial. O tipo de manuten√ß√£o n√£o √© aplicado nesta tela.")
        if not df_filtrado_geral.empty:
            st.data_editor(df_filtrado_geral, use_container_width=True, num_rows="dynamic")
        else:
            st.warning("Nenhum dado para exibir com os filtros atuais.")

    if selected == "An√°lise de Rateios":
        st.title("üì¶ An√°lise de Registros de Rateio")
        st.info("Esta se√ß√£o mostra todos os registros que foram classificados como 'RATEIO' por n√£o terem uma regi√£o mapeada. Eles foram exclu√≠dos das an√°lises principais.")
        if not df_rateio.empty:
            st.dataframe(df_rateio)
        else:
            st.success("Nenhum registro de rateio foi encontrado nos dados atuais.")

else:
    st.error("N√£o foi poss√≠vel carregar os dados para exibir o dashboard.")
